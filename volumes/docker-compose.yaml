version: "3.8"
services:
  redis:
    container_name: redis_container
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --loglevel warning
    volumes:
      - ./docker_volumes/cache:/data

  mongodb:
    container_name: mongodb_container
    image: mongo:latest
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - ./docker_volumes/mongo_data:/data/db

  mysql:
    container_name: mysql_container
    image: mysql
    user: 1000:1000
    # NOTE: use of "mysql_native_password" is not recommended: https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html#updagrading
    # (this is just an example, not entended to be a production configuration)
    restart: always
    environment:
      MYSQL_USER: jobber
      MYSQL_DATABASE: jobber_auth
      MYSQL_ROOT_PASSWORD: api
      MYSQL_PASSWORD: api
    ports:
      - "3306:3306"
    volumes:
      - ./docker_volumes/mysql_data:/var/lib/mysql

  postgres:
    container_name: postgres_container
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: jobber
      POSTGRES_PASSWORD: api
      POSTGRES_DATABASE: jobber_reviews
    ports:
      - "5432:5432"
    volumes:
      - ./docker_volumes/postgres_data:/var/lib/postgresql

  rabbitmq:
    container_name: rabbitmq_container
    image: rabbitmq:4.1-rc-management-alpine
    restart: always
    ports:
      # AMQP protocols port
      - "5672:5672"
      # Management UI
      - "15672:15672"

  elasticsearch:
    container_name: elasticsearch_container
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.0
    restart: always
    environment:
      ES_JAVA_OPTS: -Xmx1g -Xms1g
      bootstrap.memory_lock: "true"
      discovery.type: single-node
      xpack.security.enabled: "false"
      xpack.security.authc.api_key.enabled: "true"
      xpack.monitoring.collection.enabled: "true"
      xpack.security.enrollment.enabled: "true"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ./docker_volumes/elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - elastic

  kibana:
    container_name: kibana_container
    image: docker.elastic.co/kibana/kibana:8.17.0
    restart: always
    environment:
      - ELASTICSEARCH_HOST=["http://elasticsearch_container:9200"]
    ports:
      - "5601:5601"
    networks:
      - elastic
    volumes:
      - ./kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    depends_on:
      - elasticsearch

networks:
  elastic:
    name: elastic
